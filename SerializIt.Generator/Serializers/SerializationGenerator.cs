using System;
using System.Linq;
using System.Reflection;
using SerializIt.CodeAnalysis;
using SerializIt.Generator.Model;

namespace SerializIt.Generator.Serializers;

internal static class SerializationGenerator
{
    private static readonly Version version = Assembly.GetExecutingAssembly().GetName().Version;

    public static string Generate(SerializationContext context, SerializeType typeInfo)
    {
        IndentedWriter sb = new();
        WriteSerializerClass(context, typeInfo, sb);
        return sb.ToString();
    }

    private static void WriteSerializerClass(SerializationContext context, SerializeType typeInfo, IndentedWriter writer)
    {
        // Header
        writer.Write("// Generated by SerializIt SourceGenerator v.");
        writer.Write(version.ToString(3));
        writer.NewLine();
        writer.NewLine();

        // Usings
        context.Serializer?.Usings(typeInfo, writer);

        // Namespace
        writer.Write("namespace ");
        writer.Write(context.SerializerNamespace
                     ?? throw new ArgumentException($"{nameof(context.SerializerNamespace)} can't be null"));
        writer.NewLine();
        writer.Write("{");
        writer.NewLine();
        writer.Indent++;

        // Class
        writer.Write(context.Accessibility
                     ?? throw new ArgumentException($"{nameof(context.Accessibility)} can't be null"));
        writer.Write(" class ");
        writer.Write(typeInfo.SerializerName);
        writer.NewLine();
        writer.Write("{");
        writer.NewLine();
        writer.Indent++;

        // _context field
        writer.Write("private ");
        writer.Write(context.ContextNamespace
                     ?? throw new ArgumentException($"{nameof(context.ContextNamespace)} can't be null"));
        writer.Write('.');
        writer.Write(context.ClassName
                     ?? throw new ArgumentException($"{nameof(context.ClassName)} can't be null"));
        writer.Write(" _context;");
        writer.NewLine();

        // Other fields
        context.Serializer?.Fields(context, typeInfo, writer);

        // Constructor
        writer.Write("public ");
        writer.Write(typeInfo.SerializerName);
        writer.Write("(");
        writer.Write(context.ContextNamespace);
        writer.Write('.');
        writer.Write(context.ClassName);
        writer.Write(" context)");
        writer.NewLine();
        writer.Write("{");
        writer.NewLine();
        writer.Indent++;
        writer.Write("_context = context;");
        writer.NewLine();
        writer.Indent--;
        writer.Write("}");
        writer.NewLine();

        // SerializeElement(item, writer)
        context.Serializer?.StartElementFunc(context, typeInfo, writer);
        WriteRootElement(context, typeInfo, writer);
        context.Serializer?.EndElementFunc(context, typeInfo, writer);
        writer.NewLine();

        // SerializeElement(item)
        writer.Write(typeInfo.Accessibility);
        writer.Write(" string SerializeElement(");
        writer.Write(typeInfo.Namespace
                     ?? throw new ArgumentException($"{nameof(typeInfo.Namespace)} can't be null"));
        writer.Write('.');
        writer.Write(typeInfo.TypeName
                     ?? throw new ArgumentException($"{nameof(typeInfo.TypeName)} can't be null"));
        writer.Write(" item)");
        writer.NewLine();
        writer.Write("{");
        writer.Indent++;

        context.Serializer?.StartCode(writer);
        context.Serializer?.WriteSerializedMember(null, typeInfo, EInline.Never, writer);
        context.Serializer?.EndCode(writer);

        writer.Indent--;
        writer.NewLine();
        writer.Write("}");
        writer.NewLine();

        // SerializeDocument(item)
        writer.Write(typeInfo.Accessibility);
        writer.Write(" string SerializeDocument(");
        writer.Write(typeInfo.Namespace);
        writer.Write('.');
        writer.Write(typeInfo.TypeName);
        writer.Write(" item)");
        writer.NewLine();
        writer.Write("{");
        writer.Indent++;

        context.Serializer?.StartCode(writer);
        WriteDocument(context, typeInfo, writer);
        context.Serializer?.EndCode(writer);

        writer.Indent--;
        writer.NewLine();
        writer.Write("}");
        writer.NewLine();

        // String constants
        context.Serializer?.Strings(writer);

        writer.Indent--;
        writer.Write("}");
        writer.NewLine();
        writer.Indent--;
        writer.Write("}");
        writer.NewLine();
    }

    private static void WriteDocument(SerializationContext context, SerializeType typeInfo, IndentedWriter writer)
    {
        context.Serializer?.StartDocument(typeInfo, writer);
        context.Serializer?.WriteSerializedMember(null, typeInfo, EInline.Never, writer);
        context.Serializer?.EndDocument(typeInfo, writer);
    }

    private static void WriteRootElement(SerializationContext context, SerializeType typeInfo, IndentedWriter writer)
    {
        context.Serializer?.StartRootElement(typeInfo, writer);
        WriteElementMembers(context, typeInfo, writer);
        context.Serializer?.EndRootElement(typeInfo, writer);
    }

    private static void WriteElementMembers(SerializationContext context, SerializeType typeInfo, IndentedWriter writer)
    {
        var members = typeInfo.Members
            .Where(m => !m.Skip)
            .OrderBy(m => m.Order)
            .ToList();
        for (var i = 0; i < members.Count; i++)
        {
            var member = members[i];
            var memberName = $"item.{member.MemberName}";
            var firstMember = i == 0;
            var lastMember = i == members.Count - 1;
            if (member.SkipIfDefault)
            {
                context.Serializer?.StartNotDefaultCondition(memberName, writer);
            }
            context.Serializer?.StartMember(member, firstMember, writer);

            if (member.MemberType.IsReferenceType && context.Serializer?.SkipNullValues == false)
            {
                context.Serializer?.StartMemberNullCheck(memberName, writer);
            }

            WriteMemberValue(
                context,
                member.MemberType,
                memberName,
                member.Inline ? EInline.Always : EInline.Auto,
                writer);

            if (member.MemberType.IsReferenceType && context.Serializer?.SkipNullValues == false)
            {
                context.Serializer?.EndMemberNullCheck(memberName, writer);
            }

            context.Serializer?.EndMember(member, lastMember, writer);

            if (member.SkipIfDefault)
            {
                context.Serializer?.EndNotDefaultCondition(memberName, lastMember, writer);
            }
        }
    }

    private static void WriteMemberValue(
        SerializationContext context,
        TypeSymbol memberType,
        string? memberName,
        EInline inline,
        IndentedWriter writer)
    {
        if (memberType.Name == "String")
        {
            context.Serializer?.WriteStringMember(memberName, inline, writer);
        }
        else if (memberType.IsCollection)
        {
            var typeSymbol = memberType.CollectionType;
            var typeName = $"{typeSymbol?.Namespace ?? throw new ArgumentException($"{nameof(typeSymbol.Namespace)} can't be null")}.{typeSymbol.Name}";
            var elementName = context.Serializer?.StartCollection(typeName, memberName, memberType.IsArray, inline, writer);
            WriteMemberValue(context, typeSymbol, elementName, inline, writer);
            context.Serializer?.EndCollection(memberName, inline, writer);
        }
        else if (context.SerializeTypes?.FirstOrDefault(item => item.Type.CompareTo(memberType) == 0) is SerializeType serializedType)
        {
            context.Serializer?.WriteSerializedMember(memberName, serializedType, inline, writer);
        }
        else if (memberType.IsValueType)
        {
            context.Serializer?.WriteValueMember(memberName, inline, writer);
        }
    }

}
