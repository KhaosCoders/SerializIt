using Microsoft.CodeAnalysis;
using SerializIt.Generator.Model;
using System;
using System.Collections;
using System.Linq;
using System.Reflection;

namespace SerializIt.Generator.Helpers;

internal class SerializationGenerator
{
    private static readonly Version _version = Assembly.GetExecutingAssembly().GetName().Version;

    public string GenerateSerializer(SerializationContext context, SerializeType typeInfo)
    {
        ExtStringBuilder sb = new();
        WriteSerializerClass(context, typeInfo, sb);
        return sb.ToString();
    }

    private void WriteSerializerClass(SerializationContext context, SerializeType typeInfo, ExtStringBuilder sb)
    {
        sb.Append("// Generated by SerializIt SourceGenerator v.").AppendLine(_version.ToString(3))
          .AppendLine("");

        context.Serializer.Usings(sb, typeInfo);

        sb.Append("namespace ").AppendLine(context.SerializerNamespace)
          .AppendLine("{").IncreaseIndent()
          .Append(context.Accessability).Append(" class ").AppendLine(typeInfo.SerializerName)
          .AppendLine("{").IncreaseIndent()
          .Append("private ").Append(context.ContextNamespace).Append('.').Append(context.ClassName).AppendLine(" _context;")
          .Append("public ").Append(typeInfo.SerializerName).Append("(").Append(context.ContextNamespace).Append('.').Append(context.ClassName).AppendLine(" context)")
          .AppendLine("{").IncreaseIndent()
          .AppendLine("_context = context;")
          .DecreaseIndent().AppendLine("}");

        context.Serializer.StartElementFunc(context, typeInfo, sb);
        WriteRootElement(context, typeInfo, sb);
        context.Serializer.EndElementFunc(context, typeInfo, sb);

        sb.Append(typeInfo.Accessability).Append(" string SerializeElement(").Append(typeInfo.Namespace).Append('.').Append(typeInfo.TypeName).AppendLine(" item)")
          .AppendLine("{").IncreaseIndent();

        context.Serializer.StartCode(sb);
        context.Serializer.WriteSerializedMember(null, typeInfo, sb);
        context.Serializer.EndCode(sb);

        sb.DecreaseIndent().AppendLine("}")
          .Append(typeInfo.Accessability).Append(" string SerializeDocument(").Append(typeInfo.Namespace).Append('.').Append(typeInfo.TypeName).AppendLine(" item)")
          .AppendLine("{").IncreaseIndent();

        context.Serializer.StartCode(sb);
        WriteDocument(context, typeInfo, sb);
        context.Serializer.EndCode(sb);

        sb.DecreaseIndent().AppendLine("}")
          .DecreaseIndent().AppendLine("}")
          .DecreaseIndent().AppendLine("}");
    }

    private void WriteDocument(SerializationContext context, SerializeType typeInfo, ExtStringBuilder sb)
    {
        context.Serializer.StartDocument(typeInfo, sb);
        context.Serializer.WriteSerializedMember(null, typeInfo, sb);
        context.Serializer.EndDocument(typeInfo, sb);
    }

    private static void WriteRootElement(SerializationContext context, SerializeType typeInfo, ExtStringBuilder sb)
    {
        context.Serializer.StartRootElement(typeInfo, sb);
        WriteElementMembers(context, typeInfo, sb);
        context.Serializer.EndRootElement(typeInfo, sb);
    }

    private static void WriteElementMembers(SerializationContext context, SerializeType typeInfo, ExtStringBuilder sb)
    {
        var members = typeInfo.Members.Where(m => !m.Skip).ToList();
        for (int i = 0; i < members.Count; i++)
        {
            var member = members[i];
            string memberName = $"item.{member.MemberName}";
            if (member.SkipIfDefault)
            {
                context.Serializer.StartNotDefaultCondition(memberName, sb);
            }
            context.Serializer.StartMember(member, i == 0, sb);
            WriteMemberValue(context, member.MemberType, memberName, sb);
            context.Serializer.EndMember(member, i == members.Count - 1, sb);

            if (member.SkipIfDefault)
            {
                context.Serializer.EndNotDefaultCondition(memberName, sb);
            }
        }
    }

    private static void WriteMemberValue(SerializationContext context, ITypeSymbol memberType, string memberName, ExtStringBuilder sb)
    {
        if (memberType.Name == "String")
        {
            context.Serializer.WriteStringMember(memberName, sb);
        }
        else if (memberType.AllInterfaces
                .Where(i => i.Name == nameof(IEnumerable) && i.TypeArguments.Length > 0)
                .Select(i => i.TypeArguments[0])
                .FirstOrDefault() is ITypeSymbol typeSymbol)
        {
            string typeName = $"{SymbolHelper.GetNamespaceName(typeSymbol.ContainingNamespace)}.{typeSymbol.Name}";
            string elementName = context.Serializer.StartCollection(typeName, memberName, sb);
            WriteMemberValue(context, typeSymbol, elementName, sb);
            context.Serializer.EndCollection(memberName, sb);
        }
        else if (context.SerializeTypes.FirstOrDefault(item => SymbolEqualityComparer.Default.Equals(item.Type, memberType)) is SerializeType serializedType)
        {
            context.Serializer.WriteSerializedMember(memberName, serializedType, sb);
        }
        else if (memberType.IsValueType)
        {
            context.Serializer.WriteValueMember(memberName, sb);
        }
    }

}
